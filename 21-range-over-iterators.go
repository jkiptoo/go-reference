package main

import (
	"fmt"
	"iter"
	"slices"
)

//Implementing the AllElements method that returns a slice of all elements in the list
type List[T any] struct {
	head, tail *elements[T]
}

type elements[T any] struct {
	next *elements[T]
	value T
}

func (lst *List[T]) Push(v T) {
	if lst.tail == nil {
		lst.head = &elements[T]{value: v}
		lst.tail = lst.head
	} else {
		lst.tail.next = &elements[T]{value: v}
		lst.tail = lst.tail.next
	}
}

//Use All to return an iterator
func (lst *List[T]) All() iter.Seq[T] {
	return func(yield func(T) bool) {

		//Iterator takes another function as a parameter called yield. Call yield for every element to be iterated over.
		for element := lst.head; element != nil; element = element.next {
			if !yield(element.value) {
				return
			}
		} 
	}
}

//Function below returns an iterator over Fibonacci numbers so long as yiled is true
func genFib() iter.Seq[int] {
	return func(yield func(int) bool) {
		a, b := 1, 1
		for {
			if !yield(a) {
				return
			}
			a, b = b, a + b
		}
	}
}

func main() {

	lst := List[int] {}
	lst.Push(12)
	lst.Push(15)
	lst.Push(18)

	//Use iterator generated by List.All in a range loop
	for element := range lst.All() {
		fmt.Println(element)
		}

		//Use Collect function of slices to collect all the values in a slice
		all := slices.Collect(lst.All())
		fmt.Println("All collected values:", all)

		//Yield function returns false when loops hits 'break' or 'return'

		for n := range genFib() {
			if n >= 18 {
				break
			}
			fmt.Println(n)
		}		
}